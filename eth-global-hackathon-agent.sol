//SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

// ========= TOOL INTERFACES ========

interface ITwitterAPITool {

    /// @notice describes the various types of input parameters a tool can have.
    ///   Right now, only primitive types are supported.
    enum ParamType {
        STRING,
        ADDRESS,
        BOOL,
        INT,
        UINT,
        STRING_ARRAY,
        ADDRESS_ARRAY,
        BOOL_ARAY,
        INT_ARRAY,
        UINT_ARRAY
    }

    /// @notice Describes all parameters a tool expects as input.
    struct InputDescription {        
        ParamDescription[] paramDescriptions;
    }
    
    /// @notice Describes a single parameter for a tool.
    struct ParamDescription {
        ParamType paramType;
        string name;
        string description;
    }
    
    /// @notice Describes a parameter that was generated by the agent for a tool.
    struct ParamValue {
        ParamType paramType;
        bytes value;
    }
    
    /// @notice Describes all parameters that was generated by the agent for a tool.
    struct Input {
        /// @notice the generated parameters for the tool in order, based on the InputDescription.
        ///   You can use this when you want to do custom checks, or overrides before passing them to the tool.
        ParamValue[] params;

        /// @notice the generated parameter values in abi-encoded format, based on the InputDescription.
        ///   You can use this when the InputDescription matches with the function signature 1:1.
        bytes abiEncodedParams;
    }
    
    /// @notice Returns the name of this tool, should be short and meaningful. 
    /// @return Name of the tool.
    function name() external view returns (string memory);
    
    /// @notice Returns the description of this tool, when it should be used
    ///   and what it does at a high level.
    /// @return Description of the tool.
    function description() external view returns (string memory);
    
    /// @notice Runs the tool with the given input and returns its final answer
    ///   to the given task.
    /// @param input The input to this tool that is generated using the inputDescription.
    /// @return runId when the tool's execution is synchronous, the runId will be -1.
    ///   When it is asynchronous, a non-negative runId will be returned that will be passed to
    ///   the result handler once the operation is ready.
    /// @return result only present when the tool was executed synchronously and runId is -1.
    ///   Do not use unless the runId returned was -1. 
    function run(string memory input) external returns (int256 runId, string memory result);
}